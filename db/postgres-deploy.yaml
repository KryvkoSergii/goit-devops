apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  clusterIP: None
  selector:
    app: postgres
  ports:
    - port: 5432
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-gp3
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
parameters:
  type: gp3
  fsType: ext4
  encrypted: "true"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels: { app: postgres }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:16
        ports: [{containerPort: 5432}]
        env:
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
        envFrom:
          - secretRef: { name: postgres-secret }
        volumeMounts:
          - name: data
            mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec: { command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"] }
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec: { command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"] }
          initialDelaySeconds: 20
          periodSeconds: 10
        startupProbe:
          exec: { command: ["sh","-c","pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"] }
          failureThreshold: 30
          periodSeconds: 10
        resources:
          requests:
            cpu: "250m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "768Mi"
  volumeClaimTemplates:
  - metadata: { name: data }
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: ebs-gp3
      resources: { requests: { storage: 10Gi } }
